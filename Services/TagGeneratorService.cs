using System.Text.Json;
using NJsonSchema;
using Microsoft.Extensions.AI;
using HW4NoteKeeper.Settings;

namespace HW4NoteKeeper.Services
{
    /// <summary>
    /// Defines a service for generating tags based on input details using an AI model.
    /// </summary>
    public interface ITagGeneratorService
    {
        /// <summary>
        /// Generates a list of one-word tags based on the provided details.
        /// </summary>
        /// <param name="details">The text to analyze for tag generation.</param>
        /// <returns>A list of tags generated by the AI.</returns>
        Task<List<string>> GenerateTagsAsync(string details);
    }

    /// <summary>
    /// Represents the expected JSON structure for the tags generated by the AI.
    /// </summary>
    public class TagsResponse
    {
        /// <summary>
        /// Gets or sets the list of generated tags.
        /// </summary>
        public List<string> Phrases { get; set; } = new List<string>();
    }

    /// <summary>
    /// Service class for AI-based tag generation using an IChatClient.
    /// </summary>
    public class TagGeneratorService : ITagGeneratorService
    {
        private readonly IChatClient _chatClient;
        private readonly AISettings _aISettings;
        private readonly ILogger<TagGeneratorService> _logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagGeneratorService"/> class.
        /// </summary>
        /// <param name="chatClient">The chat client used to interact with the AI model.</param>
        /// <param name="aISettings">The AI settings.</param>
        /// <param name="logger">The logger instance.</param>
        public TagGeneratorService(
            IChatClient chatClient,
            AISettings aISettings,
            ILogger<TagGeneratorService> logger)
        {
            _chatClient = chatClient;
            _aISettings = aISettings;
            _logger = logger;
        }

        /// <inheritdoc />
        public async Task<List<string>> GenerateTagsAsync(string details)
        {
            // Build the JSON schema for the expected output.
            var schema = JsonSchema.FromType<TagsResponse>();
            string jsonSchemaString = schema.ToJson();
            JsonElement jsonSchemaElement = JsonDocument.Parse(jsonSchemaString).RootElement;
            var chatResponseFormatJson = ChatResponseFormat.ForJsonSchema(
                jsonSchemaElement,
                "ChatResponse",
                "Chat response schema");

            // Prepare chat options using AI settings.
            var chatOptions = new ChatOptions
            {
                Temperature = _aISettings.Temperature,
                TopP = _aISettings.TopP,
                MaxOutputTokens = _aISettings.MaxOutputTokens,
                ResponseFormat = chatResponseFormatJson
            };

            // Build the prompt for tag generation.
            string enhancedPrompt = $"Generate a JSON output of relevant one-word tags based on: {details}";

            try
            {
                // Call the AI chat client.
                ChatCompletion responseCompletion = await _chatClient.CompleteAsync(enhancedPrompt, options: chatOptions);
                var response = JsonSerializer.Deserialize<TagsResponse>(responseCompletion.Message.Text!);

                return response?.Phrases ?? new List<string>();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating tags for details: {Details}", details);
                return new List<string>();
            }
        }
    }
}
